import re
import typing as t
from copy import deepcopy

from cached_property import cached_property

from deploy.Windows.utils import DEPLOY_TEMPLATE, poor_yaml_read, poor_yaml_write
from module.base.timer import timer
from module.config.convert import *
from module.config.server import VALID_SERVER
from module.config.utils import *

CONFIG_IMPORT = '''
import datetime

# This file was automatically generated by module/config/config_updater.py.
# Don't modify it manually.


class GeneratedConfig:
    """
    Auto generated configuration
    """
'''.strip().split('\n')

DICT_GUI_TO_INGAME = {
    'zh-CN': 'cn'
    # 'en-US': 'en',
    # 'ja-JP': 'jp',
    # 'zh-TW': 'cht',
    # 'es-ES': 'es',
}


# def gui_lang_to_ingame_lang(lang: str) -> str:
#     return DICT_GUI_TO_INGAME.get(lang, 'en')


def get_generator():
    from module.base.code_generator import CodeGenerator
    return CodeGenerator()


class ConfigGenerator:
    @cached_property
    def argument(self):
        """
        Load argument.yaml, and standardise its structure.

        <group>:
            <argument>:
                type: checkbox|select|textarea|input
                value:
                option (Optional): Options, if argument has any options.
                validate (Optional): datetime
        """
        data = {}
        raw = read_file(filepath_argument('argument'))

        def option_add(keys, options):
            options = deep_get(raw, keys=keys, default=[]) + options
            deep_set(raw, keys=keys, value=options)

        # Insert packages
        option_add(keys='Emulator.PackageName.option', options=list(VALID_SERVER.keys()))

        # Insert dungeons
        # from tasks.dungeon.keywords import DungeonList
        # calyx_golden = [dungeon.name for dungeon in DungeonList.instances.values() if dungeon.is_Calyx_Golden_Memories] \
        #                + [dungeon.name for dungeon in DungeonList.instances.values() if dungeon.is_Calyx_Golden_Aether] \
        #                + [dungeon.name for dungeon in DungeonList.instances.values() if
        #                   dungeon.is_Calyx_Golden_Treasures]
        # # calyx_crimson
        # from tasks.rogue.keywords import KEYWORDS_ROGUE_PATH as Path
        # order = [Path.Destruction, Path.Preservation, Path.The_Hunt, Path.Abundance,
        #          Path.Erudition, Path.The_Harmony, Path.Nihility]
        # calyx_crimson = []
        # for path in order:
        #     calyx_crimson += [dungeon.name for dungeon in DungeonList.instances.values()
        #                       if dungeon.Calyx_Crimson_Path == path]
        # # stagnant_shadow
        # from tasks.character.keywords import CombatType
        # stagnant_shadow = []
        # for type_ in CombatType.instances.values():
        #     stagnant_shadow += [dungeon.name for dungeon in DungeonList.instances.values()
        #                         if dungeon.Stagnant_Shadow_Combat_Type == type_]
        # cavern_of_corrosion = [dungeon.name for dungeon in DungeonList.instances.values() if
        #                        dungeon.is_Cavern_of_Corrosion]
        # option_add(
        #     keys='Dungeon.Name.option',
        #     options=calyx_golden + calyx_crimson + stagnant_shadow + cavern_of_corrosion
        # )
        # # Double events
        # option_add(keys='Dungeon.NameAtDoubleCalyx.option', options=calyx_golden + calyx_crimson)
        # option_add(keys='Dungeon.NameAtDoubleRelic.option', options=cavern_of_corrosion)
        # option_add(
        #     keys='Weekly.Name.option',
        #     options=[dungeon.name for dungeon in DungeonList.instances.values() if dungeon.is_Echo_of_War])
        # # OrnamentExtraction
        # ornament = [dungeon.name for dungeon in DungeonList.instances.values() if dungeon.is_Ornament_Extraction]
        # option_add(keys='Ornament.Dungeon.option', options=ornament)
        # # Insert characters
        # from tasks.character.keywords import CharacterList
        # unsupported_characters = ["Jiaoqiu"]
        # characters = [character.name for character in CharacterList.instances.values()
        #               if character.name not in unsupported_characters]
        # option_add(keys='DungeonSupport.Character.option', options=characters)
        # # Insert assignments
        # from tasks.assignment.keywords import AssignmentEntry
        # assignments = [entry.name for entry in AssignmentEntry.instances.values()]
        # for i in range(4):
        #     option_add(keys=f'Assignment.Name_{i + 1}.option', options=assignments)
        # # Insert planner items
        # from tasks.planner.keywords.classes import ItemBase
        # for item in ItemBase.instances.values():
        #     base = item.group_base
        #     deep_set(raw, keys=['Planner', f'Item_{base.name}'], value={
        #         'stored': 'StoredPlanner',
        #         'display': 'display',
        #         'type': 'planner',
        #     })

        # Load
        for path, value in deep_iter(raw, depth=2):
            arg = {
                'type': 'input',
                'value': '',
                # option
            }
            if not isinstance(value, dict):
                value = {'value': value}
            arg['type'] = data_to_type(value, arg=path[1])
            if arg['type'] in ['stored', 'planner']:
                value['value'] = {}
                arg['display'] = 'hide'  # Hide `stored` by default
            if isinstance(value['value'], datetime):
                arg['type'] = 'datetime'
                arg['validate'] = 'datetime'
            # Manual definition has the highest priority
            arg.update(value)
            deep_set(data, keys=path, value=arg)

        return data

    @cached_property
    def task(self):
        """
        <task_group>:
            <task>:
                <group>:
        """
        return read_file(filepath_argument('task'))

    @cached_property
    def default(self):
        """
        <task>:
            <group>:
                <argument>: value
        """
        return read_file(filepath_argument('default'))

    @cached_property
    def override(self):
        """
        <task>:
            <group>:
                <argument>: value
        """
        return read_file(filepath_argument('override'))

    @cached_property
    def gui(self):
        """
        <i18n_group>:
            <i18n_key>: value, value is None
        """
        return read_file(filepath_argument('gui'))

    @cached_property
    @timer
    def args(self):
        """
        Merge definitions into standardised json.

            task.yaml ---+
        argument.yaml ---+-----> args.json
        override.yaml ---+
         default.yaml ---+

        """
        # Construct args
        data = {}
        for path, groups in deep_iter(self.task, depth=3):
            if 'tasks' not in path:
                continue
            task = path[2]
            # Add storage to all task
            # groups.append('Storage')
            for group in groups:
                if group not in self.argument:
                    print(f'`{task}.{group}` is not related to any argument group')
                    continue
                deep_set(data, keys=[task, group], value=deepcopy(self.argument[group]))

        def check_override(path, value):
            # Check existence
            old = deep_get(data, keys=path, default=None)
            if old is None:
                print(f'`{".".join(path)}` is not a existing argument')
                return False
            # Check type
            # But allow `Interval` to be different
            old_value = old.get('value', None) if isinstance(old, dict) else old
            value = old.get('value', None) if isinstance(value, dict) else value
            if type(value) != type(old_value) \
                    and old_value is not None \
                    and path[2] not in ['SuccessInterval', 'FailureInterval']:
                print(
                    f'`{value}` ({type(value)}) and `{".".join(path)}` ({type(old_value)}) are in different types')
                return False
            # Check option
            if isinstance(old, dict) and 'option' in old:
                if value not in old['option']:
                    print(f'`{value}` is not an option of argument `{".".join(path)}`')
                    return False
            return True

        # Set defaults
        for p, v in deep_iter(self.default, depth=3):
            if not check_override(p, v):
                continue
            deep_set(data, keys=p + ['value'], value=v)
        # Override non-modifiable arguments
        for p, v in deep_iter(self.override, depth=3):
            if not check_override(p, v):
                continue
            if isinstance(v, dict):
                typ = v.get('type')
                if typ == 'state':
                    pass
                elif typ == 'lock':
                    deep_default(v, keys='display', value="disabled")
                elif deep_get(v, keys='value') is not None:
                    deep_default(v, keys='display', value='hide')
                for arg_k, arg_v in v.items():
                    deep_set(data, keys=p + [arg_k], value=arg_v)
            else:
                deep_set(data, keys=p + ['value'], value=v)
                deep_set(data, keys=p + ['display'], value='hide')
        # Set command
        for path, groups in deep_iter(self.task, depth=3):
            if 'tasks' not in path:
                continue
            task = path[2]
            if deep_get(data, keys=f'{task}.Scheduler.Command'):
                deep_set(data, keys=f'{task}.Scheduler.Command.value', value=task)
                deep_set(data, keys=f'{task}.Scheduler.Command.display', value='hide')

        return data

    @timer
    def generate_code(self):
        """
        Generate python code.

        args.json ---> config_generated.py

        """
        visited_group = set()
        visited_path = set()
        lines = CONFIG_IMPORT
        for path, data in deep_iter(self.argument, depth=2):
            group, arg = path
            if group not in visited_group:
                lines.append('')
                lines.append(f'    # Group `{group}`')
                visited_group.add(group)

            option = ''
            if 'option' in data and data['option']:
                option = '  # ' + ', '.join([str(opt) for opt in data['option']])
            path = '.'.join(path)
            lines.append(f'    {path_to_arg(path)} = {repr(parse_value(data["value"], data=data))}{option}')
            visited_path.add(path)

        with open(filepath_code(), 'w', encoding='utf-8', newline='') as f:
            for text in lines:
                f.write(text + '\n')

    @timer
    def generate_stored(self):
        import module.config.stored.classes as classes
        gen = get_generator()
        gen.add('from module.config.stored.classes import (')
        with gen.tab():
            for cls in sorted([name for name in dir(classes) if name.startswith('Stored')]):
                gen.add(cls + ',')
        gen.add(')')
        gen.Empty()
        gen.Empty()
        gen.Empty()
        gen.CommentAutoGenerage('module/config/config_updater.py')

        with gen.Class('StoredGenerated'):
            for path, data in deep_iter(self.args, depth=3):
                cls = data.get('stored')
                if cls:
                    gen.add(f'{path[-1]} = {cls}("{".".join(path)}")')

        gen.write('module/config/stored/stored_generated.py')


    @cached_property
    def menu(self):
        """
        Generate menu definitions

        task.yaml --> menu.json

        """
        data = {}
        for task_group in self.task.keys():
            value = deep_get(self.task, keys=[task_group, 'menu'])
            if value not in ['collapse', 'list']:
                value = 'collapse'
            deep_set(data, keys=[task_group, 'menu'], value=value)
            value = deep_get(self.task, keys=[task_group, 'page'])
            if value not in ['setting', 'tool']:
                value = 'setting'
            deep_set(data, keys=[task_group, 'page'], value=value)
            tasks = deep_get(self.task, keys=[task_group, 'tasks'], default={})
            tasks = list(tasks.keys())
            deep_set(data, keys=[task_group, 'tasks'], value=tasks)

        # Simulated universe is WIP, task won't show on GUI but can still be bound
        # e.g. `RogueUI('src', task='Rogue')`
        # Comment this for development
        # data.pop('Rogue')

        return data

    @cached_property
    def stored(self):
        import module.config.stored.classes as classes
        data = {}
        for path, value in deep_iter(self.args, depth=3):
            if value.get('type') not in ['stored', 'planner']:
                continue
            name = path[-1]
            stored = value.get('stored')
            stored_class = getattr(classes, stored)
            row = {
                'name': name,
                'path': '.'.join(path),
                'i18n': f'{path[1]}.{path[2]}.name', # 不需要但还是别删了
                'stored': stored,
                'attrs': stored_class('')._attrs,
                'order': value.get('order', 0),
                'color': value.get('color', '#777777')
            }
            data[name] = row

        # sort by `order` ascending, but `order`==0 at last
        data = sorted(data.items(), key=lambda kv: (kv[1]['order'] == 0, kv[1]['order']))
        data = {k: v for k, v in data}
        return data

    @staticmethod
    def generate_deploy_template():
        template = poor_yaml_read(DEPLOY_TEMPLATE)
        cn = {
            'Repository': 'cn',
            'PypiMirror': 'https://pypi.tuna.tsinghua.edu.cn/simple',
            'Language': 'zh-CN',
        }
        aidlux = {
            'GitExecutable': '/usr/bin/git',
            'PythonExecutable': '/usr/bin/python',
            'RequirementsFile': './deploy/AidLux/0.92/requirements.txt',
            'AdbExecutable': '/usr/bin/adb',
        }

        docker = {
            'GitExecutable': '/usr/bin/git',
            'PythonExecutable': '/usr/local/bin/python',
            'RequirementsFile': './deploy/docker/requirements.txt',
            'AdbExecutable': '/usr/bin/adb',
        }

        def update(suffix, *args):
            file = f'./config/deploy.{suffix}.yaml'
            new = deepcopy(template)
            for dic in args:
                new.update(dic)
            poor_yaml_write(data=new, file=file)

        update('template')
        update('template-cn', cn)
        # update('template-AidLux', aidlux)
        # update('template-AidLux-cn', aidlux, cn)
        # update('template-docker', docker)
        # update('template-docker-cn', docker, cn)

        tpl = {
            'Repository': '{{repository}}',
            'GitExecutable': '{{gitExecutable}}',
            'PythonExecutable': '{{pythonExecutable}}',
            'AdbExecutable': '{{adbExecutable}}',
            'Language': '{{language}}',
            'Theme': '{{theme}}',
        }

        def update(file, *args):
            new = deepcopy(template)
            for dic in args:
                new.update(dic)
            poor_yaml_write(data=new, file=file)

        update('./webapp/packages/main/public/deploy.yaml.tpl', tpl)

    @timer
    def generate(self):
        _ = self.args
        _ = self.menu
        _ = self.stored
        # _ = self.event
        # self.insert_server()
        # 先把yaml文件里的参数写到.json里，
        write_file(filepath_args(), self.args)
        write_file(filepath_args('menu'), self.menu)
        # ↓这个用的是stored.classes.py里的数据
        write_file(filepath_args('stored'), self.stored)
        self.generate_code()
        self.generate_stored()
        # for lang in LANGUAGES:
        #     self.generate_i18n(lang)
        self.generate_deploy_template()


class ConfigUpdater:
    # source, target, (optional)convert_func
    # redirection = [
    #     ('Dungeon.Dungeon.Name', 'Dungeon.Dungeon.Name', convert_20_dungeon),
    #     ('Dungeon.Dungeon.NameAtDoubleCalyx', 'Dungeon.Dungeon.NameAtDoubleCalyx', convert_20_dungeon),
    #     ('Dungeon.DungeonDaily.CalyxGolden', 'Dungeon.DungeonDaily.CalyxGolden', convert_20_dungeon),
    #     ('Dungeon.DungeonDaily.CalyxCrimson', 'Dungeon.DungeonDaily.CalyxCrimson', convert_20_dungeon),
    #     ('Rogue.RogueWorld.SimulatedUniverseElite', 'Rogue.RogueWorld.SimulatedUniverseFarm', convert_rogue_farm),
    #     # 2.3
    #     ('Dungeon.Planner.Item_Moon_Madness_Fang', 'Dungeon.Planner.Item_Moon_Rage_Fang',
    #      convert_Item_Moon_Madness_Fang),
    # ]

    @cached_property
    def args(self):
        return read_file(filepath_args())

    def config_update(self, old, is_template=False):
        """
        Args:
            old (dict):
            is_template (bool):

        Returns:
            dict:
        """
        new = {}

        def deep_load(keys):
            data = deep_get(self.args, keys=keys, default={})
            value = deep_get(old, keys=keys, default=data['value'])
            typ = data['type']
            display = data.get('display')
            if is_template or value is None or value == '' \
                    or typ in ['lock', 'state'] or (display == 'hide' and typ != 'stored'):
                value = data['value']
            value = parse_value(value, data=data)
            deep_set(new, keys=keys, value=value)

        for path, _ in deep_iter(self.args, depth=3):
            deep_load(path)
        # 后期修改config里的参数（好像就是花的命名之类的
        # if not is_template:
        #     new = self.config_redirect(old, new)
        # new = self.update_state(new)

        return new

    def config_redirect(self, old, new):
        """
        Convert old settings to the new.

        Args:
            old (dict):
            new (dict):

        Returns:
            dict:
        """
        for row in self.redirection:
            if len(row) == 2:
                source, target = row
                update_func = None
            elif len(row) == 3:
                source, target, update_func = row
            else:
                continue

            if isinstance(source, tuple):
                value = []
                error = False
                for attribute in source:
                    tmp = deep_get(old, keys=attribute)
                    if tmp is None:
                        error = True
                        continue
                    value.append(tmp)
                if error:
                    continue
            else:
                value = deep_get(old, keys=source)
                if value is None:
                    continue

            if update_func is not None:
                value = update_func(value)

            if isinstance(target, tuple):
                for k, v in zip(target, value):
                    # Allow update same key
                    if (deep_get(old, keys=k) is None) or (source == target):
                        deep_set(new, keys=k, value=v)
            elif (deep_get(old, keys=target) is None) or (source == target):
                deep_set(new, keys=target, value=value)

        return new

    # @staticmethod
    # def update_state(data):
    #     # Limit setting combinations
    #     if deep_get(data, keys='Rogue.RogueWorld.UseImmersifier') is False:
    #         deep_set(data, keys='Rogue.RogueWorld.UseStamina', value=False)
    #     if deep_get(data, keys='Rogue.RogueWorld.UseStamina') is True:
    #         deep_set(data, keys='Rogue.RogueWorld.UseImmersifier', value=True)
    #     if deep_get(data, keys='Rogue.RogueWorld.DoubleEvent') is True:
    #         deep_set(data, keys='Rogue.RogueWorld.UseImmersifier', value=True)
    #     # Store immersifier in dungeon task
    #     if deep_get(data, keys='Rogue.RogueWorld.UseImmersifier') is True:
    #         deep_set(data, keys='Dungeon.Scheduler.Enable', value=True)
    #     # Cloud settings
    #     if deep_get(data, keys='Alas.Emulator.GameClient') == 'cloud_android':
    #         deep_set(data, keys='Alas.Emulator.PackageName', value='CN-Official')
    #
    #     return data

    def save_callback(self, key: str, value: t.Any) -> t.Iterable[t.Tuple[str, t.Any]]:
        """
        Args:
            key: Key path in config json, such as "Main.Emotion.Fleet1Value"
            value: Value set by user, such as "98"

        Yields:
            str: Key path to set config json, such as "Main.Emotion.Fleet1Record"
            any: Value to set, such as "2020-01-01 00:00:00"
        """
        if key == 'DailyQuest.Dungeon.Team':
            yield 'DailyQuest.Dungeon.Team',value
        # if key == 'Rogue.RogueWorld.UseImmersifier' and value is False:
        #     yield 'Rogue.RogueWorld.UseStamina', False
        # if key == 'Rogue.RogueWorld.UseStamina' and value is True:
        #     yield 'Rogue.RogueWorld.UseImmersifier', True
        # if key == 'Rogue.RogueWorld.DoubleEvent' and value is True:
        #     yield 'Rogue.RogueWorld.UseImmersifier', True
        if key == 'Alas.Emulator.GameClient' and value == 'cloud_android':
            yield 'Alas.Emulator.PackageName', 'CN-Official'
            yield 'Alas.Optimization.WhenTaskQueueEmpty', 'close_game'
        # if key == 'DailyPassword.DailyPassword.WechatInstallPath':
        #     yield 'DailyPassword.DailyPassword.WechatInstallPath', value
        # Sync Dungeon.TrailblazePower and Ornament.TrailblazePower
        # if key == 'Dungeon.TrailblazePower.ExtractReservedTrailblazePower':
        #     yield 'Ornament.TrailblazePower.ExtractReservedTrailblazePower', value
        # if key == 'Dungeon.TrailblazePower.UseFuel':
        #     yield 'Ornament.TrailblazePower.UseFuel', value
        # if key == 'Dungeon.TrailblazePower.FuelReserve':
        #     yield 'Ornament.TrailblazePower.FuelReserve', value
        # if key == 'Ornament.TrailblazePower.ExtractReservedTrailblazePower':
        #     yield 'Dungeon.TrailblazePower.ExtractReservedTrailblazePower', value
        # if key == 'Ornament.TrailblazePower.UseFuel':
        #     yield 'Dungeon.TrailblazePower.UseFuel', value
        # if key == 'Ornament.TrailblazePower.FuelReserve':
        #     yield 'Dungeon.TrailblazePower.FuelReserve', value

    def iter_hidden_args(self, data) -> t.Iterator[str]:
        """
        Args:
            data (dict): config

        Yields:
            str: Arg path that should be hidden
        """
        if not deep_get(data, 'ClearJinGeTalisman.ClearJinGeTalisman.BuySuperCatBallWhenArriveRankNineEveryWeek'):
            yield 'ClearJinGeTalisman.JinGeStorage.BuySuperCatBall'
        if not deep_get(data, 'Guild.Cosplay.SendCosplayStatus'):
            yield 'Guild.Cosplay.SendStatusTimes'
        if not deep_get(data, 'DailyQuest.DailyQuestOptions.DailyJinGeWinReward'):
            yield 'DailyQuest.DailyStorage.JinGeDailyWinReward'
        if not deep_get(data, 'DailyQuest.DailyQuestOptions.AutoDailyPassword'):
            yield 'DailyQuest.DailyStorage.AutoDailyPassword'
        # if deep_get(data, 'Ornament.TrailblazePower.UseFuel') == False:
        #     yield 'Ornament.TrailblazePower.FuelReserve'
        # if deep_get(data, 'Rogue.RogueBlessing.PresetBlessingFilter') != 'custom':
        #     yield 'Rogue.RogueBlessing.CustomBlessingFilter'
        # if deep_get(data, 'Rogue.RogueBlessing.PresetResonanceFilter') != 'custom':
        #     yield 'Rogue.RogueBlessing.CustomResonanceFilter'
        # if deep_get(data, 'Rogue.RogueBlessing.PresetCurioFilter') != 'custom':
        #     yield 'Rogue.RogueBlessing.CustomCurioFilter'
        # if deep_get(data, 'Rogue.RogueWorld.WeeklyFarming', default=False) is False:
        #     yield 'Rogue.RogueWorld.SimulatedUniverseFarm'

    def get_hidden_args(self, data) -> t.Set[str]:
        """
        Return a set of hidden args
        """
        out = list(self.iter_hidden_args(data))
        return set(out)

    def read_file(self, config_name, is_template=False):
        """
        Read and update config file.

        Args:
            config_name (str): ./config/{file}.json
            is_template (bool):

        Returns:
            dict:
        """
        old = read_file(filepath_config(config_name))
        new = self.config_update(old, is_template=is_template)
        # The updated config did not write into file, although it doesn't matters.
        # Commented for performance issue
        # self.write_file(config_name, new)
        return new

    @staticmethod
    def write_file(config_name, data, mod_name='alas'):
        """
        Write config file.

        Args:
            config_name (str): ./config/{file}.json
            data (dict):
            mod_name (str):
        """
        write_file(filepath_config(config_name, mod_name), data)

    @timer
    def update_file(self, config_name, is_template=False):
        """
        Read, update and write config file.

        Args:
            config_name (str): ./config/{file}.json
            is_template (bool):

        Returns:
            dict:
        """
        data = self.read_file(config_name, is_template=is_template)
        self.write_file(config_name, data)
        return data


if __name__ == '__main__':
    """
    Process the whole config generation.

                 task.yaml -+----------------> menu.json
             argument.yaml -+-> args.json ---> config_generated.py
             override.yaml -+       |
                  gui.yaml --------\|
                                   ||
    (old) i18n/<lang>.json --------\\========> i18n/<lang>.json
    (old)    template.json ---------\========> template.json
    """
    # Ensure running in Alas root folder
    import os

    os.chdir(os.path.join(os.path.dirname(__file__), '../../'))

    ConfigGenerator().generate()
    ConfigUpdater().update_file('template', is_template=True)
